Für die Funktionsweise ist es sehr wichtig, dass alle Berechnungen nach ein und dem selben Schema ablaufen.

In der Taschenrechnerapp gibt es folgende Rechenoperationen:

    1. Wertrückgabe Instant (Bsp. xHoch2)
    2. Wertverrechnung mit einem anderen Wert (Bsp. Addition)
    3. Wertverrechnung mit n Werten (Bsp. Setzen von Klammern)

Interessant ist, dass die Klammerfunktion auf dem iPhone gar nicht Funktioniert.
Man Stand also vor dem Gleichen Problem, wollte dieses aber nicht weiter lösen.

Ich habe hierbei folgende Idee:
Die Funktionsweise zwischen der simplen- und der extended Edition unterscheiden sich.

Bei den ersten Beiden Methoden reicht die simple Programmierung vollkommen aus.
Diese Funktionalität habe ich bereits programmiert und diese funktioniert auch.

Für die Komplexeren Funktionen wird die Funktionsweise in weiten stücken angepasst.
Hierbei Funktioniert das Ganze eher wie bei einem üblichen Grafikfähigen Taschenrechner.
Dabei wird erst die Gesamte berechnung abgewartet und erst ganz am Ende aufgelöst.
Bei der Berechnung des Ergebnisses steht man vor einem Berechnungsstring, welcher dann Stück für Stück
berechnet wird. 
Hierbei soll am Ende ein Pro-Taschenrechner herauskommen. Ich möchte den normalen extended Taschenrechner von Apple deutlich verbessern.
Dafür ist ein Cursor nötig.

1. Standardrechner

Ideen:
    Bei Berechnungen:
    Wann verändert sich welcher Wert?
    So könnte man es Programieren:
    Bool new Action welches sich auf positiv setzt sobald man ein Rechenzeichen drückt.
    Neben dem Bool wird auch die Aktion abgespeichert ('Addition' '2');
    Sobald man auf = geht wird der Wert wieder auf false gesetzt und die Berechnung ganz normal ausgeführt.
    Drückt man allerdings auf = und der Wert ist bereits false wird die abgespeicherte Aktion ausgeführt.

    //

    Oder: 
    Die Funktion Equals merkt sich was sie zuletzt getan hat.
    Sie merkt sich die Action und den Wert.
    Wenn man jetzt nochmal Equals aufruft überprüft die Funktion zuerst, ob sich der nächste Befehl vom vorherigen unterscheidet.
    Wenn ja, dann wird alles wieder geändert, wenn nein, dann wird der vorherige Befehl nochmal ausgeführt.
    Außerdem muss der Inputwert verglichen werden.
    Hat sich der Inputwert nur wie erwartet verändert, bedeutet dies, dass kein neuer Befehl gegeben wurde.

Bugs:
    - Aktion = Zweimal infolge fürt in falscher Reihenfolge aus

Fehlende Features:


2. Extendedrechner

Ideen:

Bugs:

Fehlende Features: